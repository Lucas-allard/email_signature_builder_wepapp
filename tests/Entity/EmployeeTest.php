<?php

namespace App\Tests\Entity;

use App\Entity\Employee;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\Regex;
use Symfony\Component\Validator\Validation;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class EmployeeTest extends TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->employee = new Employee();
        $this->validator = Validation::createValidator();
    }

    public function testGetId()
    {
        /** @var Employee|MockObject $this- >employee */
        $this->employee = $this->getMockBuilder(Employee::class)
            ->disableOriginalConstructor()
            ->setMethods(['getId'])
            ->getMock();

        $this->employee->method('getId')
            ->willReturn(1);

        $this->assertEquals(1, $this->employee->getId());
    }

    public function testSetPicture()
    {
        $this->employee->setPicture('picture');
        $this->assertEquals('picture', $this->employee->getPicture());
    }

    public function testGetPicture()
    {
        $this->employee->setPicture('picture');
        $this->assertEquals('picture', $this->employee->getPicture());
    }

    public function testPictureIsValid()
    {
        $this->employee->setPicture('https://mili-atlas.fr/wp-content/uploads/picture.jpg');
        $errors = $this->validator->validate($this->employee->getPicture(), [
            new Regex([
                'pattern' => '/^https:\/\/mili-atlas\.fr\/wp-content\/uploads\/.*$/',
                'message' => 'L\'URL doit commencer par https://mili-atlas.fr/wp-content/uploads/'
            ])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testPictureIsNotValid()
    {
        $this->employee->setPicture('picture');
        $errors = $this->validator->validate($this->employee->getPicture(), [
            new Regex(['pattern' => '/^https:\/\/mili-atlas\.fr\/wp-content\/uploads\/.*$/',
                'message' => 'L\'URL doit commencer par https://mili-atlas.fr/wp-content/uploads/'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testGetFirstName()
    {
        $this->employee->setFirstName('John');
        $this->assertEquals('John', $this->employee->getFirstName());
    }

    public function testSetFirstName()
    {
        $this->employee->setFirstName('John');
        $this->assertEquals('John', $this->employee->getFirstName());
    }

    public function testGetLastName()
    {
        $this->employee->setLastName('Doe');
        $this->assertEquals('Doe', $this->employee->getLastName());
    }

    public function testSetLastName()
    {
        $this->employee->setLastName('Doe');
        $this->assertEquals('Doe', $this->employee->getLastName());
    }

    public function testSetPhoneNumber()
    {
        $this->employee->setPhoneNumber('06 06 06 06 06');
        $this->assertEquals('06 06 06 06 06', $this->employee->getPhoneNumber());
    }

    public function testGetPhoneNumber()
    {
        $this->employee->setPhoneNumber('06 06 06 06 06');
        $this->assertEquals('06 06 06 06 06', $this->employee->getPhoneNumber());
    }

    public function testPhoneNumberIsTooShort()
    {
        $this->employee->setPhoneNumber('1234567890');
        $errors = $this->validator->validate($this->employee->getPhoneNumber(), [
            new Length(['min' => 14, 'max' => 14, 'exactMessage' => 'Votre numéro de téléphone doit contenir {{ limit }} caractères'])
        ]);
        $this->assertGreaterThan(0, count($errors), (string)$errors);
    }

    public function testPhoneNumberIsTooLong()
    {
        $this->employee->setPhoneNumber('1234567890123456');
        $errors = $this->validator->validate($this->employee->getPhoneNumber(), [
            new Length(['min' => 14, 'max' => 14, 'exactMessage' => 'Votre numéro de téléphone doit contenir {{ limit }} caractères'])
        ]);
        $this->assertGreaterThan(0, count($errors), (string)$errors);
    }

    public function testIsPhoneNumberIsValid()
    {
        $this->employee->setPhoneNumber('06 06 06 06 06');
        $errors = $this->validator->validate($this->employee->getPhoneNumber(), [
            new Regex(['pattern' => '/^0[1-9]([-. ]?[0-9]{2}){4}$/',
                'message' => 'Le numéro de téléphone doit être au format 06 06 06 06 06'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testIsPhoneNumberIsNotValid()
    {
        $this->employee->setPhoneNumber('06 06 06 06');
        $errors = $this->validator->validate($this->employee->getPhoneNumber(), [
            new Regex(['pattern' => '/^0[1-9]([-. ]?[0-9]{2}){4}$/',
                'message' => 'Le numéro de téléphone doit être au format 06 06 06 06 06'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testGetPosition()
    {
        $this->employee->setPosition('Développeur');
        $this->assertEquals('Développeur', $this->employee->getPosition());
    }

    public function testSetPosition()
    {
        $this->employee->setPosition('Développeur');
        $this->assertEquals('Développeur', $this->employee->getPosition());
    }

    public function testSetFirstEmail()
    {
        $this->employee->setFirstEmail('email1');
        $this->assertEquals('email1', $this->employee->getFirstEmail());
    }

    public function testGetFirstEmail()
    {
        $this->employee->setFirstEmail('email1');
        $this->assertEquals('email1', $this->employee->getFirstEmail());
    }

    public function testFirstEmailIsValid()
    {
        $this->employee->setFirstEmail('email3@mili-atlas.fr');
        $errors = $this->validator->validate($this->employee->getFirstEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@mili-atlas\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@mili-atlas.fr'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testFirstEmailIsNotValid()
    {
        $this->employee->setFirstEmail('email3@mii-atlas.fr');
        $errors = $this->validator->validate($this->employee->getFirstEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@mili-atlas\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@mili-atlas.fr'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testGetSecondEmail()
    {
        $this->employee->setSecondEmail('email2');
        $this->assertEquals('email2', $this->employee->getSecondEmail());
    }

    public function testSetSecondEmail()
    {
        $this->employee->setSecondEmail('email2');
        $this->assertEquals('email2', $this->employee->getSecondEmail());
    }

    public function testSecondEmailIsValid()
    {
        $this->employee->setSecondEmail('email3@mili-invest.fr');
        $errors = $this->validator->validate($this->employee->getSecondEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@mili-invest\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@mili-invest.fr'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testSecondEmailIsNotValid()
    {
        $this->employee->setSecondEmail('email3@miliinvest.fr');
        $errors = $this->validator->validate($this->employee->getSecondEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@mili-invest\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@mili-invest.fr'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testGetThirdEmail()
    {
        $this->employee->setThirdEmail('email3');
        $this->assertEquals('email3', $this->employee->getThirdEmail());
    }

    public function testSetThirdEmail()
    {
        $this->employee->setThirdEmail('email3');
        $this->assertEquals('email3', $this->employee->getThirdEmail());
    }

    public function testThirdEmailIsValid()
    {
        $this->employee->setThirdEmail('email3@1806-patrimoine.fr');
        $errors = $this->validator->validate($this->employee->getThirdEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@1806-patrimoine\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@1806-patrimoine.fr'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testThirdEmailIsNotValid()
    {
        $this->employee->setThirdEmail('email3@1806patrimoine.fr');
        $errors = $this->validator->validate($this->employee->getThirdEmail(), [
            new Regex(['pattern' => '/^[a-zA-Z0-9._%+-]+@1806-patrimoine\.fr$/',
                'message' => 'L\'adresse email doit être au format mail@1806-patrimoine.fr'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testSetInstagramUrl()
    {
        $this->employee->setInstagramUrl('https://www.instagram.com/instagram/');
        $this->assertEquals('https://www.instagram.com/instagram/', $this->employee->getInstagramUrl());
    }

    public function testGetInstagramUrl()
    {
        $this->employee->setInstagramUrl('https://www.instagram.com/instagram/');
        $this->assertEquals('https://www.instagram.com/instagram/', $this->employee->getInstagramUrl());
    }

    public function testInstagramUrlIsValid()
    {
        $this->employee->setInstagramUrl('https://www.instagram.com/instagram/');
        $errors = $this->validator->validate($this->employee->getInstagramUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.instagram\.com\/.*$/',
                'message' => 'L\'adresse instagram doit être au format https://www.instagram.com/instagram/'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testInstagramUrlIsNotValid()
    {
        $this->employee->setInstagramUrl('https://www.instagram.com');
        $errors = $this->validator->validate($this->employee->getInstagramUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.instagram\.com\/.*$/',
                'message' => 'L\'adresse instagram doit être au format https://www.instagram.com/instagram/'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testSetTwitterUrl()
    {
        $this->employee->setTwitterUrl('https://www.twitter.com/twitter/');
        $this->assertEquals('https://www.twitter.com/twitter/', $this->employee->getTwitterUrl());
    }

    public function testGetTwitterUrl()
    {
        $this->employee->setTwitterUrl('https://www.twitter.com/twitter/');
        $this->assertEquals('https://www.twitter.com/twitter/', $this->employee->getTwitterUrl());
    }

    public function testTwitterUrlIsValid()
    {
        $this->employee->setTwitterUrl('https://www.twitter.com/twitter/');
        $errors = $this->validator->validate($this->employee->getTwitterUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.twitter\.com\/.*$/',
                'message' => 'L\'adresse twitter doit être au format https://www.twitter.com/twitter/'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testTwitterUrlIsNotValid()
    {
        $this->employee->setTwitterUrl('https://www.twitter.com');
        $errors = $this->validator->validate($this->employee->getTwitterUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.twitter\.com\/.*$/',
                'message' => 'L\'adresse twitter doit être au format https://www.twitter.com/twitter/'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testSetLinkedinUrl()
    {
        $this->employee->setLinkedinUrl('https://www.linkedin.com/linkedin/');
        $this->assertEquals('https://www.linkedin.com/linkedin/', $this->employee->getLinkedinUrl());
    }

    public function testGetLinkedinUrl()
    {
        $this->employee->setLinkedinUrl('https://www.linkedin.com/linkedin/');
        $this->assertEquals('https://www.linkedin.com/linkedin/', $this->employee->getLinkedinUrl());
    }

    public function testLinkedinUrlIsValid()
    {
        $this->employee->setLinkedinUrl('https://www.linkedin.com/linkedin/');
        $errors = $this->validator->validate($this->employee->getLinkedinUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.linkedin\.com\/.*$/',
                'message' => 'L\'adresse linkedin doit être au format https://www.linkedin.com/linkedin/'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testLinkedinUrlIsNotValid()
    {
        $this->employee->setLinkedinUrl('https://www.linkedin.com');
        $errors = $this->validator->validate($this->employee->getLinkedinUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.linkedin\.com\/.*$/',
                'message' => 'L\'adresse linkedin doit être au format https://www.linkedin.com/linkedin/'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }

    public function testGetFacebookUrl()
    {
        $this->employee->setFacebookUrl('https://www.facebook.com/facebook/');
        $this->assertEquals('https://www.facebook.com/facebook/', $this->employee->getFacebookUrl());
    }

    public function testSetFacebookUrl()
    {
        $this->employee->setFacebookUrl('https://www.facebook.com/facebook/');
        $this->assertEquals('https://www.facebook.com/facebook/', $this->employee->getFacebookUrl());
    }

    public function testFacebookUrlIsValid()
    {
        $this->employee->setFacebookUrl('https://www.facebook.com/facebook/');
        $errors = $this->validator->validate($this->employee->getFacebookUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.facebook\.com\/.*$/',
                'message' => 'L\'adresse facebook doit être au format https://www.facebook.com/facebook/'])
        ]);
        $this->assertCount(0, $errors, (string)$errors);
    }

    public function testFacebookUrlIsNotValid()
    {
        $this->employee->setFacebookUrl('https://www.facebook.com');
        $errors = $this->validator->validate($this->employee->getFacebookUrl(), [
            new Regex(['pattern' => '/^https:\/\/www\.facebook\.com\/.*$/',
                'message' => 'L\'adresse facebook doit être au format https://www.facebook.com/facebook/'])
        ]);
        $this->assertCount(1, $errors, (string)$errors);
    }
}
